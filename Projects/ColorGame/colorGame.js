// Assign page elements
const colorDisplay = document.getElementById('colorDisplay'),
  h1 = document.querySelector('h1'),
  messageDisplay = document.querySelector('#message'),
  squares = document.querySelectorAll('.square');

const changeColors = function changeColors (color) {

  /*
   * Arguments: String
   * Returns: Void
   *
   * This function takes argument 'color' and is called when the correct
   * color has been picked. To give a visual indication that the correct
   * color was chosen, this function will change the color assigned to squares
   * to be the passed-in color.
   */

  // Loop through all squares
  for (const square of squares) {
    square.style.backgroundColor = color;
  }
};

const randomColor = function randomColor () {

  /*
   * Arguments: none
   * Returns: String
   *
   * This function constructs an RGB(x,x,x) string
   * to populate the color array created by generateRandomColors().
   */

  // Pick a "red" from 0-255
  const red = Math.floor(Math.random() * 256);
  // Pick a "green" from 0-255
  const green = Math.floor(Math.random() * 256);
  // Pick a "blue" from 0-255
  const blue = Math.floor(Math.random() * 256);

  return `rgb(${red}, ${green}, ${blue})`;
};

const generateRandomColors = function generateRandomColors (num) {

  /*
   * Arguments: Int
   * Returns: Array
   *
   * This function constructs the colors array by calling randomColor()
   * which constructs the strings. It takes num as parameter to set how many
   * colors will be generated by randomColor() and then pushes each constructed
   * color string into the array.
   */

  // Make array
  const arr = [];

  // Repeat num times
  for (let i = 0; i < num; i++) {
    arr.push(randomColor());
  }

  return arr;
};

const colors = generateRandomColors(6);

const pickedColorFunc = function pickedColorFunc () {

  /*
   * Arguments: None
   * Returns: Int
   *
   * Generate a random number between 0 and the length of the colors array
   * rounded down, to serve as the index position of the color to be guessed.
   */
  const random = Math.floor(Math.random() * colors.length);

  return random;
};

// Choose the color that has to be found
const pickedColor = pickedColorFunc();

// Adjust colorDisplay span element's text to the color string sought
colorDisplay.textContent = colors[pickedColor];

for (let i = 0; i < squares.length; i++) {
  // Add initial color to squares
  squares[i].style.backgroundColor = colors[i];

  // Add event listener to each square
  squares[i].addEventListener('click', function clickEvent () {
    // Grab the color of clicked square
    const clickedColor = this.style.backgroundColor;

    // Compare color to clickedColor
    if (clickedColor === colors[pickedColor]) {
      messageDisplay.textContent = 'Correct!';
      changeColors(clickedColor);
      h1.style.backgroundColor = clickedColor;
    } else {
      this.style.backgroundColor = '#232323';
      messageDisplay.textContent = 'Try Again';
    }
  });
}
