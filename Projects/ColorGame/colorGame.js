// ----VARIABLE DEFINITIONS----
const bodyBgColor = '#232324',
  colorDisplay = document.getElementById('colorDisplay'),
  h1 = document.querySelector('h1'),
  messageDisplay = document.querySelector('#message'),
  resetButton = document.querySelector('#reset'),
  squares = document.querySelectorAll('.square');

// ----FUNCTION DEFINITIONS----

// Change color of all squares to clickedColor when match is found
const changeColors = function changeColors (color) {

  /*
   * Arguments: String
   * Returns: Void
   *
   * This function takes argument 'color' and is called when the correct
   * color has been picked. To give a visual indication that the correct
   * color was chosen, this function will change the color assigned to squares
   * to be the passed-in color.
   */

  // Loop through all squares
  for (const square of squares) {
    square.style.backgroundColor = color;
  }
};

// Utility function to generate random color string
const randomColor = function randomColor () {

  /*
   * Arguments: none
   * Returns: String
   *
   * This function constructs an RGB(x,x,x) string
   * to populate the color array created by generateRandomColors().
   */

  // Pick a "red" from 0-255
  const red = Math.floor(Math.random() * 256);
  // Pick a "green" from 0-255
  const green = Math.floor(Math.random() * 256);
  // Pick a "blue" from 0-255
  const blue = Math.floor(Math.random() * 256);

  // Return interpolated string
  return `rgb(${red}, ${green}, ${blue})`;
};

// Generate array of random color strings
const generateRandomColors = function generateRandomColors (num) {

  /*
   * Arguments: Int
   * Returns: Array
   *
   * This function constructs the colors array by calling randomColor()
   * which constructs the strings. It takes num as parameter to set how many
   * colors will be generated by randomColor() and then pushes each constructed
   * color string into the array.
   */

  // Make array
  const arr = [];

  // Repeat num times and push into array
  for (let index = 0; index < num; index++) {
    arr.push(randomColor());
  }

  return arr;
};

// Generate initial colors array for page-load
let colors = generateRandomColors(6);

// Utility function to assign colors to squares
const assignColors = function assignColors () {

  /*
   * Arguments: None
   * Returns: Void
   *
   * Assign color from 'color' array sequentially to each square in 'squares'
   */
  for (let index = 0; index < squares.length; index++) {
    squares[index].style.backgroundColor = colors[index];
  }
};

// Pick the color which is to be guessed from color array
const pickedColorFunc = function pickedColorFunc () {

  /*
   * Arguments: None
   * Returns: Int
   *
   * Generate a random number between 0 and the length of the colors array
   * rounded down, to serve as the index position of the color to be guessed.
   */
  const random = Math.floor(Math.random() * colors.length);

  return random;
};

// Choose the color that has to be found
let pickedColor = pickedColorFunc();

// Add resetButton functionality
resetButton.addEventListener('click', () => {
  // Generate new color array and assign to squares
  colors = generateRandomColors(6);
  assignColors();

  // Reset header background color
  h1.style.backgroundColor = bodyBgColor;

  // Reset messageDisplay text
  messageDisplay.textContent = '';

  // Pick a new color to guess
  pickedColor = pickedColorFunc();

  // Reset colorDisplay to match picked color
  colorDisplay.textContent = colors[pickedColor];
});

// ----CORE GAME LOGIC----

// Adjust colorDisplay span element's text to the color string to be found
colorDisplay.textContent = colors[pickedColor];

for (let index = 0; index < squares.length; index++) {
  // Add initial color to squares
  assignColors();
  // Squares[index].style.backgroundColor = colors[index];

  // Add event listener to each square
  squares[index].addEventListener('click', function clickEvent () {
    // Grab the color of clicked square
    const clickedColor = this.style.backgroundColor;

    // Compare clickedColor to pickedColor
    if (clickedColor === colors[pickedColor]) {
      messageDisplay.textContent = 'Correct!';
      changeColors(clickedColor);
      h1.style.backgroundColor = clickedColor;
    } else {
      this.style.backgroundColor = bodyBgColor;
      messageDisplay.textContent = 'Try Again';
    }
  });
}
